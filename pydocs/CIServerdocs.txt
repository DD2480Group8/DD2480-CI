Creating database and table 'builds' if not exists.
Connecting to the database...
Tables after creation: [('builds',)]
Database created and table 'builds' initialized successfully.
Help on module CIServer:

NAME
    CIServer

CLASSES
    http.server.BaseHTTPRequestHandler(socketserver.StreamRequestHandler)
        SimpleHandler

    class SimpleHandler(http.server.BaseHTTPRequestHandler)
     |  SimpleHandler(request, client_address, server)
     |
     |  Method resolution order:
     |      SimpleHandler
     |      http.server.BaseHTTPRequestHandler
     |      socketserver.StreamRequestHandler
     |      socketserver.BaseRequestHandler
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  do_GET(self)
     |
     |  do_POST(self)
     |      Handles POST requests from GitHub webhooks by queueing them for background processing.
     |      Immediately returns a 202 Accepted response.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from http.server.BaseHTTPRequestHandler:
     |
     |  address_string(self)
     |      Return the client address.
     |
     |  date_time_string(self, timestamp=None)
     |      Return the current date and time formatted for a message header.
     |
     |  end_headers(self)
     |      Send the blank line ending the MIME headers.
     |
     |  flush_headers(self)
     |
     |  handle(self)
     |      Handle multiple requests if necessary.
     |
     |  handle_expect_100(self)
     |      Decide what to do with an "Expect: 100-continue" header.
     |
     |      If the client is expecting a 100 Continue response, we must
     |      respond with either a 100 Continue or a final response before
     |      waiting for the request body. The default is to always respond
     |      with a 100 Continue. You can behave differently (for example,
     |      reject unauthorized requests) by overriding this method.
     |
     |      This method should either return True (possibly after sending
     |      a 100 Continue response) or send an error response and return
     |      False.
     |
     |  handle_one_request(self)
     |      Handle a single HTTP request.
     |
     |      You normally don't need to override this method; see the class
     |      __doc__ string for information on how to handle specific HTTP
     |      commands such as GET and POST.
     |
     |  log_date_time_string(self)
     |      Return the current time formatted for logging.
     |
     |  log_error(self, format, *args)
     |      Log an error.
     |
     |      This is called when a request cannot be fulfilled.  By
     |      default it passes the message on to log_message().
     |
     |      Arguments are the same as for log_message().
     |
     |      XXX This should go to the separate error log.
     |
     |  log_message(self, format, *args)
     |      Log an arbitrary message.
     |
     |      This is used by all other logging functions.  Override
     |      it if you have specific logging wishes.
     |
     |      The first argument, FORMAT, is a format string for the
     |      message to be logged.  If the format string contains
     |      any % escapes requiring parameters, they should be
     |      specified as subsequent arguments (it's just like
     |      printf!).
     |
     |      The client ip and current date/time are prefixed to
     |      every message.
     |
     |      Unicode control characters are replaced with escaped hex
     |      before writing the output to stderr.
     |
     |  log_request(self, code='-', size='-')
     |      Log an accepted request.
     |
     |      This is called by send_response().
     |
     |  parse_request(self)
     |      Parse a request (internal).
     |
     |      The request should be stored in self.raw_requestline; the results
     |      are in self.command, self.path, self.request_version and
     |      self.headers.
     |
     |      Return True for success, False for failure; on failure, any relevant
     |      error response has already been sent back.
     |
     |  send_error(self, code, message=None, explain=None)
     |      Send and log an error reply.
     |
     |      Arguments are
     |      * code:    an HTTP error code
     |                 3 digits
     |      * message: a simple optional 1 line reason phrase.
     |                 *( HTAB / SP / VCHAR / %x80-FF )
     |                 defaults to short entry matching the response code
     |      * explain: a detailed message defaults to the long entry
     |                 matching the response code.
     |
     |      This sends an error response (so it must be called before any
     |      output has been generated), logs the error, and finally sends
     |      a piece of HTML explaining the error to the user.
     |
     |  send_header(self, keyword, value)
     |      Send a MIME header to the headers buffer.
     |
     |  send_response(self, code, message=None)
     |      Add the response header to the headers buffer and log the
     |      response code.
     |
     |      Also send two standard headers with the server software
     |      version and the current date.
     |
     |  send_response_only(self, code, message=None)
     |      Send the response header only.
     |
     |  version_string(self)
     |      Return the server software version string.
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from http.server.BaseHTTPRequestHandler:
     |
     |  MessageClass = <class 'http.client.HTTPMessage'>
     |
     |  default_request_version = 'HTTP/0.9'
     |
     |  error_content_type = 'text/html;charset=utf-8'
     |
     |  error_message_format = '<!DOCTYPE HTML>\n<html lang="en">\n    <head>\...
     |
     |  monthname = [None, 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'A...
     |
     |  protocol_version = 'HTTP/1.0'
     |
     |  responses = {<HTTPStatus.CONTINUE: 100>: ('Continue', 'Request receive...
     |
     |  server_version = 'BaseHTTP/0.6'
     |
     |  sys_version = 'Python/3.12.7'
     |
     |  weekdayname = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from socketserver.StreamRequestHandler:
     |
     |  finish(self)
     |
     |  setup(self)
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from socketserver.StreamRequestHandler:
     |
     |  disable_nagle_algorithm = False
     |
     |  rbufsize = -1
     |
     |  timeout = None
     |
     |  wbufsize = 0
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from socketserver.BaseRequestHandler:
     |
     |  __init__(self, request, client_address, server)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from socketserver.BaseRequestHandler:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

FUNCTIONS
    handle_remove_readonly(func, path, exc)
        Handles removal of read-only files by modifying permissions.

        Args:
            func: Function that triggered the error
            path: File path causing the issue
            exc: Exception details

    process_queue()
        Worker function that processes tasks from the queue continuously.

    process_webhook_payload(payload, log_id)

    remove_temp_folder(folder)
        Removes a temporary folder.

        Args:
            folder (str): Path of the directory to be removed.

    run_server(port)
        Starts an HTTP server on the specified port with a background worker thread.

DATA
    task_queue = <queue.Queue object>

FILE
    /Users/melissasaber/Desktop/DD2480-CI/src/app/CIServer.py


